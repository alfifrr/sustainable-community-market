{
  "openapi": "3.0.0",
  "info": {
    "title": "Sustainable Community Market API",
    "version": "1.0.0",
    "description": "API documentation for Sustainable Community Market platform"
  },
  "servers": [
    {
      "url": "https://sustainable-community-market-test.onrender.com",
      "description": "Test server"
    },
    {
      "url": "https://sustainable-community-market.onrender.com",
      "description": "Production server"
    },
    {
      "url": "http://localhost:5000",
      "description": "Local development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "username": { "type": "string" },
          "password": { "type": "string", "format": "password" },
          "first_name": { "type": "string" },
          "last_name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "phone_number": { "type": "string" },
          "role_id": {
            "type": "integer",
            "description": "User role ID (1: admin, 2: seller, 3: buyer)",
            "example": 3
          }
        },
        "required": [
          "username",
          "password",
          "first_name",
          "last_name",
          "email",
          "phone_number",
          "role_id"
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "label": { "type": "string" },
          "address": { "type": "string" },
          "details": { "type": "string" },
          "contact_person": { "type": "string" }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "price": { "type": "number" },
          "stock": { "type": "integer" },
          "category_id": { "type": "integer" },
          "address_id": { "type": "integer" },
          "expiration_date": { "type": "string", "format": "date-time" },
          "sustainability_certifications": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of certification IDs. Empty array means non-sustainable product.",
            "example": [1, 3]
          }
        },
        "required": [
          "name",
          "description",
          "price",
          "stock",
          "category_id",
          "address_id",
          "expiration_date"
        ]
      },
      "SustainabilityCertification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Organic Certified"
          },
          "description": {
            "type": "string",
            "example": "Products that are grown and processed using organic farming methods"
          },
          "icon": {
            "type": "string",
            "example": "eco_leaf"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductCertification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "product_id": {
            "type": "integer",
            "example": 1
          },
          "certification_id": {
            "type": "integer",
            "example": 1
          },
          "status": {
            "type": "string",
            "enum": ["pending", "approved", "rejected"],
            "example": "pending"
          },
          "verification_date": {
            "type": "string",
            "format": "date-time"
          },
          "verified_by": {
            "type": "integer",
            "example": 1
          }
        }
      }
    }
  },
  "paths": {
    "/api/users": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Validation error"
          }
        }
      },
      "get": {
        "tags": ["Browse"],
        "summary": "Get all users or search users by name",
        "description": "Retrieve all users or search users by first name or last name",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search query for user name (searches both first and last name)"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Users retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Manage Self"],
        "summary": "Update user profile",
        "description": "Update authenticated user's profile information including username and password",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "old_password",
                  "password",
                  "first_name",
                  "last_name",
                  "phone_number"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "johndoe",
                    "minLength": 6,
                    "pattern": "^[a-z0-9]+$",
                    "description": "Lowercase letters and numbers only"
                  },
                  "old_password": {
                    "type": "string",
                    "format": "password",
                    "description": "Current password for verification"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "description": "Must contain 1 uppercase, 1 number, and 1 symbol"
                  },
                  "first_name": {
                    "type": "string",
                    "example": "John",
                    "minLength": 3,
                    "pattern": "^[a-zA-Z]+$"
                  },
                  "last_name": {
                    "type": "string",
                    "example": "Doe",
                    "minLength": 3,
                    "pattern": "^[a-zA-Z]+$"
                  },
                  "phone_number": {
                    "type": "string",
                    "example": "1234567890",
                    "minLength": 10,
                    "pattern": "^\\d+$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error (invalid input or duplicate username/phone)"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": ["Browse"],
        "summary": "Get user by ID",
        "description": "Retrieve detailed information about a specific user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Users retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/category": {
      "get": {
        "tags": ["Browse"],
        "summary": "Get all categories",
        "description": "Retrieve list of all product categories",
        "responses": {
          "200": {
            "description": "Successfully retrieved categories list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string" },
                  "password": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          }
        }
      }
    },
    "/api/profile": {
      "get": {
        "tags": ["Manage Self"],
        "summary": "Get user profile",
        "description": "Retrieve authenticated user's profile information",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 1
                        },
                        "username": {
                          "type": "string",
                          "example": "johndoe"
                        },
                        "email": {
                          "type": "string",
                          "example": "john@example.com"
                        },
                        "first_name": {
                          "type": "string",
                          "example": "John"
                        },
                        "last_name": {
                          "type": "string",
                          "example": "Doe"
                        },
                        "phone_number": {
                          "type": "string",
                          "example": "1234567890"
                        },
                        "is_verified": {
                          "type": "boolean",
                          "example": true
                        },
                        "date_created": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "User profile not found"
          }
        }
      }
    },
    "/api/send-activation": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Send activation email",
        "description": "Send activation link to user's email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "alfifrr"
                  },
                  "password": {
                    "type": "string",
                    "example": "Securepass123!"
                  }
                },
                "required": ["username", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Activation email sent successfully"
          },
          "400": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/refresh-token": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh access token",
        "description": "Get new access token using existing refresh token (insert the refresh token into the Authorize button on the top of the page)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "New access token"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid refresh token"
          }
        }
      }
    },
    "/api/activate/{token}": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Activate account",
        "description": "Activate user account using token",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Activation token"
          }
        ],
        "responses": {
          "200": {
            "description": "Account activated successfully"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        }
      }
    },
    "/api/addresses": {
      "post": {
        "tags": ["Manage Address"],
        "summary": "Add new address",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address created successfully"
          }
        }
      },
      "get": {
        "tags": ["Manage Address"],
        "summary": "Get user addresses",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Addresses retrieved successfully"
          }
        }
      }
    },
    "/api/addresses/{address_id}": {
      "put": {
        "tags": ["Manage Address"],
        "summary": "Update address",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address updated successfully"
          }
        }
      },
      "delete": {
        "tags": ["Manage Address"],
        "summary": "Delete address",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address deleted successfully"
          }
        }
      }
    },
    "/api/products": {
      "post": {
        "tags": ["Seller"],
        "summary": "Create new product listing",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully"
          }
        }
      },
      "get": {
        "tags": ["Browse"],
        "summary": "Get all products or search products",
        "description": "Retrieve all products or search by name, description, or category",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search query (matches product name, description, or category)"
          }
        ],
        "responses": {
          "200": {
            "description": "Products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Products retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "tags": ["Browse"],
        "summary": "Get product by ID",
        "description": "Retrieve detailed information about a specific product",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Product retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": ["Seller"],
        "summary": "Update an existing product",
        "security": [{ "bearerAuth": [] }],
        "description": "Modify details of an existing product listing",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "description": "Product ID"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token for authentication"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Coway 600ml"
                },
                "description": {
                  "type": "string",
                  "example": "Drinking Wotoh Beff"
                },
                "price": {
                  "type": "number",
                  "example": 5000
                },
                "stock": {
                  "type": "integer",
                  "example": 10
                },
                "category_id": {
                  "type": "integer",
                  "example": 2
                },
                "address_id": {
                  "type": "integer",
                  "example": 5
                },
                "expiration_date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2030-04-19T23:59:59Z"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product updated successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "delete": {
        "tags": ["Seller"],
        "summary": "Delete a product",
        "security": [{ "bearerAuth": [] }],
        "description": "Remove a product listing from the marketplace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "description": "Product ID"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/api/process": {
      "post": {
        "tags": ["Seller"],
        "summary": "Process delivery for an order",
        "security": [{ "bearerAuth": [] }],
        "description": "Start processing a delivery for a confirmed transaction",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["transaction_id", "expedition_id"],
                "properties": {
                  "transaction_id": {
                    "type": "integer",
                    "example": 5,
                    "description": "ID of the transaction to process"
                  },
                  "expedition_id": {
                    "type": "integer",
                    "example": 1,
                    "description": "ID of the expedition user to assign for delivery"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delivery processing started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Order processed successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "delivery_status": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "processed",
                            "cancelled",
                            "delivered"
                          ]
                        },
                        "assigned_expedition": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User must be seller"
          },
          "404": {
            "description": "Transaction not found"
          }
        }
      }
    },
    "/api/buy": {
      "post": {
        "tags": ["Buyer"],
        "summary": "Purchase product",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address_id": { "type": "integer" },
                  "product_id": { "type": "integer" },
                  "quantity": { "type": "integer" }
                },
                "required": ["address_id", "product_id", "quantity"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchase successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "integer" },
                    "quantity": { "type": "integer" },
                    "original_price": { "type": "number" },
                    "total_price": { "type": "number" },
                    "delivery_fee": { "type": "number" },
                    "grand_total": { "type": "number" },
                    "discount_details": {
                      "type": "object",
                      "properties": {
                        "expiration": {
                          "type": "object",
                          "properties": {
                            "percentage": { "type": "number" },
                            "amount": { "type": "number" }
                          }
                        },
                        "bulk": {
                          "type": "object",
                          "properties": {
                            "percentage": { "type": "number" },
                            "amount": { "type": "number" }
                          }
                        }
                      }
                    },
                    "product_details": { "type": "object" },
                    "pickup_address_details": { "type": "object" },
                    "delivery_address_details": { "type": "object" },
                    "created_at": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "422": {
            "description": "Insufficient funds"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/cancel": {
      "post": {
        "tags": ["Buyer"],
        "summary": "Cancel order",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transaction_id": { "type": "integer" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order cancelled successfully"
          }
        }
      }
    },
    "/api/rate": {
      "post": {
        "tags": ["Buyer"],
        "summary": "Rate a purchased product",
        "security": [{ "bearerAuth": [] }],
        "description": "Submit a rating and optional testimonial for a product after successful delivery confirmation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transaction_id": {
                    "type": "integer",
                    "example": 1,
                    "description": "ID of the completed transaction"
                  },
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "example": 5,
                    "description": "Rating value between 1-5 stars"
                  },
                  "testimonial": {
                    "type": "string",
                    "example": "Great product and excellent seller service!",
                    "maxLength": 1000,
                    "description": "Optional review text for the product"
                  }
                },
                "required": ["transaction_id", "rating"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Review submitted successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "rating": {
                          "type": "integer",
                          "example": 5
                        },
                        "testimonial": {
                          "type": "string",
                          "example": "Great product and excellent seller service!"
                        },
                        "review_date": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid rating value, testimonial too long, or transaction not eligible for rating"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User is not the buyer of this transaction"
          },
          "404": {
            "description": "Transaction not found"
          },
          "409": {
            "description": "Product has already been rated for this transaction"
          }
        }
      }
    },
    "/api/deposit": {
      "post": {
        "tags": ["Manage Funds"],
        "summary": "Deposit funds",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": { "type": "number" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deposit successful"
          }
        }
      }
    },
    "/api/withdraw": {
      "post": {
        "tags": ["Manage Funds"],
        "summary": "Withdraw funds",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": { "type": "number" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal successful"
          }
        }
      }
    },
    "/api/product-history": {
      "get": {
        "tags": ["History"],
        "summary": "Get product history",
        "description": "Retrieve history of products for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved product history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - Token expired or invalid permissions"
          }
        }
      }
    },
    "/api/product-history/{id}": {
      "get": {
        "tags": ["History"],
        "summary": "Get product history by ID",
        "description": "Retrieve specific product transaction by ID for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Transaction retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "quantity": {
                          "type": "integer"
                        },
                        "total_price": {
                          "type": "number"
                        },
                        "delivery_status": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "processed",
                            "cancelled",
                            "delivered",
                            "rated"
                          ]
                        },
                        "rating": {
                          "type": "integer"
                        },
                        "testimonial": {
                          "type": "string"
                        },
                        "review_date": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - Token expired or invalid permissions"
          },
          "404": {
            "description": "Transaction not found or you don't have permission to view it"
          }
        }
      }
    },
    "/api/transactions": {
      "get": {
        "tags": ["History"],
        "summary": "Get transaction history",
        "description": "Retrieve transaction history for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - Token expired or invalid permissions"
          }
        }
      }
    },
    "/api/processed-products": {
      "get": {
        "tags": ["Expedition"],
        "summary": "Get all processed products",
        "description": "Retrieve all products with PROCESSED delivery status",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Successfully retrieved processed products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Processed products retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "quantity": {
                            "type": "integer"
                          },
                          "total_price": {
                            "type": "number"
                          },
                          "delivery_status": {
                            "type": "string",
                            "enum": ["processed"]
                          },
                          "pickup_address_details": {
                            "type": "object"
                          },
                          "delivery_address_details": {
                            "type": "object"
                          },
                          "product_details": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User must be admin or expedition"
          }
        }
      }
    },
    "/api/processed-products/{id}": {
      "get": {
        "tags": ["Expedition"],
        "summary": "Get processed product by ID",
        "description": "Retrieve specific processed product by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved processed product",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Processed product retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "quantity": {
                          "type": "integer"
                        },
                        "total_price": {
                          "type": "number"
                        },
                        "delivery_status": {
                          "type": "string",
                          "enum": ["processed"]
                        },
                        "pickup_address_details": {
                          "type": "object"
                        },
                        "delivery_address_details": {
                          "type": "object"
                        },
                        "product_details": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User must be admin or expedition"
          },
          "404": {
            "description": "Processed product not found"
          }
        }
      }
    },
    "/api/products/{product_id}/reviews": {
      "get": {
        "tags": ["Browse"],
        "summary": "Get product reviews",
        "description": "Retrieve all ratings and reviews for a specific product",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved product reviews",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Product reviews retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "product_id": {
                          "type": "integer"
                        },
                        "total_reviews": {
                          "type": "integer"
                        },
                        "average_rating": {
                          "type": "number",
                          "format": "float",
                          "example": 4.5
                        },
                        "reviews": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "rating": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 5
                              },
                              "testimonial": {
                                "type": "string"
                              },
                              "review_date": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "reviewer": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "name": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/expeditions": {
      "get": {
        "tags": ["Expedition"],
        "summary": "Get expedition users",
        "description": "Retrieve all expedition users or search by name",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search query for expedition name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved expedition users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Expedition users retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 1
                          },
                          "name": {
                            "type": "string",
                            "example": "John Doe"
                          },
                          "date_joined": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "last_activity": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "is_verified": {
                            "type": "boolean"
                          },
                          "role": {
                            "type": "string",
                            "enum": ["expedition"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - Only admin and sellers can view expedition list"
          }
        }
      }
    },
    "/api/sustainability/certifications": {
      "get": {
        "tags": ["Certifications"],
        "summary": "Get all sustainability certifications",
        "description": "Retrieve all available sustainability certifications",
        "responses": {
          "200": {
            "description": "Successfully retrieved certifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Certifications retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SustainabilityCertification"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/sustainability/product-certifications": {
      "get": {
        "tags": ["Certifications"],
        "summary": "Get all product certifications",
        "description": "Retrieve all product sustainability certifications",
        "responses": {
          "200": {
            "description": "Successfully retrieved product certifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Product certifications retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductCertification"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/sustainability/product-certifications/{product_id}": {
      "get": {
        "tags": ["Certifications"],
        "summary": "Get certifications for a specific product",
        "description": "Retrieve all sustainability certifications for a specific product",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the product"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved product certifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Product certifications retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductCertification"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/api/sustainability/product-certifications/{certification_id}/verify": {
      "post": {
        "tags": ["Certifications"],
        "summary": "Verify a product certification",
        "description": "Admin can verify and approve a product's sustainability certification",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "certification_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the product certification to verify"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully verified certification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Certification verified successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ProductCertification"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User must be an admin"
          },
          "404": {
            "description": "Certification not found"
          }
        }
      }
    },
    "/api/confirm-delivery": {
      "post": {
        "tags": ["Expedition"],
        "summary": "Confirm delivery",
        "description": "Confirm delivery of processed product by expedition user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["transaction_id"],
                "properties": {
                  "transaction_id": {
                    "type": "integer",
                    "example": 1,
                    "description": "ID of the processed transaction"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delivery confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Delivery confirmed successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "transaction": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "delivery_status": {
                              "type": "string",
                              "enum": ["delivered"]
                            },
                            "confirmation_date": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "buyer_history": {
                          "type": "object"
                        },
                        "seller_history": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or transaction not in processed state"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User must be admin or assigned expedition"
          },
          "404": {
            "description": "Transaction not found"
          }
        }
      }
    }
  }
}
